datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  students      Student[]
  teachers      Teacher[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Student {
  id         String               @id @default(cuid())
  created_at DateTime?            @default(now())
  updated_at DateTime?            @updatedAt
  firstname  String
  lastname   String
  gender     String
  grade      String
  birthdate  DateTime
  school     String
  avatar     String
  admin      User                 @relation(fields: [user_id], references: [id])
  user_id    String               
  contact    Contact?
  teachers   TeachersOnStudents[]
}

model Contact {
  id           String    @id @default(cuid())
  created_at   DateTime? @default(now())
  updated_at   DateTime? @updatedAt
  email        String    @unique
  phone        String    @unique
  name         String
  relationship String
  avatar       String?
  student      Student   @relation(fields: [student_id], references: [id])
  student_id   String    @unique
}

model Teacher {
  id         String               @id @default(cuid())
  created_at DateTime?            @default(now())
  updated_at DateTime?            @updatedAt
  email      String               @unique
  phone      String?              @unique
  name       String
  avatar     String?
  subject    String
  students   TeachersOnStudents[]
  user       User                 @relation(fields: [user_id], references: [id])
  user_id    String               
}

model TeachersOnStudents {
  student     Student  @relation(fields: [student_id], references: [id])
  student_id  String
  teacher     Teacher  @relation(fields: [teacher_id], references: [id])
  teacher_id  String
  assigned_at DateTime @default(now())
  assigned_by String

  @@id([student_id, teacher_id])
}
