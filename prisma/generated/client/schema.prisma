datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  output   = "./generated/client"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id              String    @id @default(cuid())
  name            String?
  email           String?   @unique
  emailVerified   DateTime?
  image           String?
  accounts        Account[]
  sessions        Session[]
  students        Student[]
  teachers        Teacher[]
  contacts        Contact[]
  subscription_id String?   @unique
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Gender {
  male
  female
}

enum School {
  chkail
  henri_matisse
  le_bougeoir
  diwan
  wlad_slama
  al_wahda
}

model Student {
  id         String    @id @default(cuid())
  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt
  firstname  String
  lastname   String
  gender     Gender
  grade      Int
  birthdate  DateTime
  school     School
  user      User      @relation(fields: [user_id], references: [id])
  user_id    String
  teacher    Teacher?  @relation(fields: [teacher_id], references: [id])
  teacher_id String
  contact    Contact?   @relation(fields: [contact_id], references: [id], onDelete: Cascade)
  contact_id String?
}

enum Relationship {
  mother
  father
  brother
  sister
}

model Contact {
  id           String    @id @default(cuid())
  created_at   DateTime? @default(now())
  updated_at   DateTime? @updatedAt
  email        String    @unique
  phone        String    @unique
  name         String
  relationship Relationship
  students     Student[]
  user         User      @relation(fields: [user_id], references: [id])
  user_id      String
}

enum Subject {
  physics
  maths
  french
}

model Teacher {
  id         String    @id @default(cuid())
  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt
  email      String    @unique
  phone      String?   @unique
  name       String
  gender     Gender
  subject    Subject
  students   Student[]
  user       User      @relation(fields: [user_id], references: [id])
  user_id    String
}
